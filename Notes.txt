//hexagon grid

Canvas {
	anchors.fill: parent
	z: 10
	property int hexSize: 20
	property int colNum: parent.width / hexSize;
	property int rowNum: parent.height / hexSize;

	onPaint: {
		var ctx = getContext("2d");

		// Очищаем canvas
		ctx.clearRect(0, 0, width, height);

		// Определяем размеры сетки
		var hexWidth = Math.sqrt(3) * hexSize;
		var hexHeight = 2 * hexSize;

		// Определяем смещение для четных и нечетных рядов
		var yOffset = hexHeight * 1;

		// Устанавливаем ширину линии
		ctx.lineWidth = 2;

		// Добавляем эффект тени
		ctx.shadowColor = "rgba(0, 0, 0, 0.5)";
		ctx.shadowBlur = 1;
		ctx.shadowOffsetX = 2;
		ctx.shadowOffsetY = 2;

		// Рисуем hex-сетку
		for (var col = 0; col < colNum; col++) {
			for (var row = 0; row < rowNum; row++) {
				var x = col * hexWidth * 1;
				var y = row * yOffset * 1;

				// Сдвигаем нечетные ряды
				if (col % 2 === 1) {
					y += yOffset / 2;
				}

				drawHexagon(ctx, x, y, hexSize);
			}
		}
	}

	function drawHexagon(ctx, x, y, size) {
		ctx.beginPath();
		for (var i = 0; i < 6; i++) {
			var angle = i * (2 * Math.PI / 6);
			var hexX = x + size * Math.cos(angle);
			var hexY = y + size * Math.sin(angle);
			if (i === 0) {
				ctx.moveTo(hexX, hexY);
			} else {
				ctx.lineTo(hexX, hexY);
			}
		}
		ctx.closePath();
		ctx.stroke();
	}
}

//---Item Loading by loader

Item {
	id: itemCoeff
	width: parent.width
	height: parent.height/2
	Loader {
		id: coeffLoader
		anchors.left: parent.left
		anchors.right: parent.right
		anchors.top: parent.top
		anchors.bottom: parent.bottom
		source: "qrc:/qml/windows/WinCoeff.qml"
		anchors.topMargin: 0 // Указываем путь к вашей форме
		onStatusChanged: {
			if (coeffLoader.status === Loader.Error) {
				// Выводим ошибку, если форма не загружена
				console.error("Ошибка загрузки формы WinCoeff.qml: " + coeffLoader.errorString);
			} else if (coeffLoader.status === Loader.Ready && coeffLoader.item === null) {
				// Выводим ошибку, если форма загружена, но item не установлен
				console.error("Ошибка: форма WinCoeff.qml загружена, но item не установлен.");
			}
		}
	}
}


//---TopBar


            Rectangle{
                id: topBarFrame
                x: 298
                height: 30
                color: "#dbdcdb"
                anchors.left: parent.left
                anchors.right: parent.right
                anchors.top: parent.top


                DragHandler{
                    onActiveChanged: if(active){
                                         app.startSystemMove()
                                         internal.ifMaximizedRestore()
                                     }
                }

                Row {
                    id: rowTopBar
                    anchors.fill: parent
                    rightPadding: 5
                    spacing: 5
                    layoutDirection: Qt.RightToLeft

                    SceTopBarButton {
                        id: buttonClose
                        anchors.verticalCenter: parent.verticalCenter
                        btnIcon: "qrc:/icons/x-lg.svg"
                        onClicked: {
                            app.close()
                        }

                    }
                    SceTopBarButton {
                        id: buttonMaximize
                        anchors.verticalCenter: parent.verticalCenter
                        btnIcon: "qrc:/icons/window-fullscreen.svg"
                        onClicked: {
                            internal.maximizeRestore()
                        }
                    }

                    SceTopBarButton {
                        id: buttonMinimize
                        anchors.verticalCenter: parent.verticalCenter
                        btnIcon: "qrc:/icons/dash-lg.svg"
                        onClicked: {
                            app.showMinimized()
                            internal.restoreMargins()
                        }
                    }

                }

            }


//---Resize bars

    MouseArea {
        id: leftResize
        width: 5
        anchors.left: background.left
        anchors.top: background.top
        anchors.bottom: background.bottom
        anchors.leftMargin: -5
        anchors.topMargin: 10
        anchors.bottomMargin: 10
        cursorShape: Qt.SizeHorCursor
        DragHandler{
            target: null
            onActiveChanged: if (active) { app.startSystemResize(Qt.LeftEdge) }
        }
    }

    MouseArea {
        id: rightResize
        width: 5
        anchors.right: background.right
        anchors.top: background.top
        anchors.bottom: background.bottom
        anchors.rightMargin: -5
        anchors.topMargin: 10
        anchors.bottomMargin: 10
        cursorShape: Qt.SizeHorCursor
        DragHandler{
            target: null
            onActiveChanged: if (active) { app.startSystemResize(Qt.RightEdge) }
        }
    }

    MouseArea {
        id: topResize
        height: 5
        anchors.left: background.left
        anchors.right: background.right
        anchors.top: background.top
        anchors.leftMargin: 10
        anchors.rightMargin: 10
        anchors.topMargin: -5
        cursorShape: Qt.SizeVerCursor
        DragHandler{
            target: null
            onActiveChanged: if (active) { app.startSystemResize(Qt.TopEdge) }
        }
    }

    MouseArea {
        id: bottomResize
        height: 5
        anchors.left: background.left
        anchors.right: background.right
        anchors.bottom: background.bottom
        anchors.bottomMargin: -5
        anchors.leftMargin: 10
        anchors.rightMargin: 10
        cursorShape: Qt.SizeVerCursor
        DragHandler{
            target: null
            onActiveChanged: if (active) { app.startSystemResize(Qt.BottomEdge) }
        }
    }

    MouseArea {
        id: topLeftResize
        width: 10
        height: 10
        anchors.left: background.left
        anchors.top: background.top
        anchors.leftMargin: -10
        anchors.topMargin: -10
        cursorShape: Qt.SizeFDiagCursor
        DragHandler{
            target: null
            onActiveChanged: if (active) { app.startSystemResize(Qt.LeftEdge | Qt.TopEdge) }
        }
    }

    MouseArea {
        id: topRightResize
        width: 10
        height: 10
        anchors.right: background.right
        anchors.top: background.top
        anchors.rightMargin: -10
        anchors.topMargin: -10
        cursorShape: Qt.SizeBDiagCursor
        DragHandler{
            target: null
            onActiveChanged: if (active) { app.startSystemResize(Qt.RightEdge | Qt.TopEdge) }
        }
    }

    MouseArea {
        id: bottomLeftResize
        width: 10
        height: 10
        anchors.left: background.left
        anchors.bottom: background.bottom
        anchors.leftMargin: -10
        anchors.bottomMargin: -10
        cursorShape: Qt.SizeBDiagCursor
        DragHandler{
            target: null
            onActiveChanged: if (active) { app.startSystemResize(Qt.LeftEdge | Qt.BottomEdge) }
        }
    }

    MouseArea {
        id: bottomRightResize
        x: 1270
        y: 710
        width: 10
        height: 10
        anchors.right: background.right
        anchors.bottom: background.bottom
        rotation: 0
        anchors.bottomMargin: 0
        anchors.rightMargin: 0
        cursorShape: Qt.SizeFDiagCursor
        DragHandler{
            target: null
            onActiveChanged: if (active) { app.startSystemResize(Qt.RightEdge | Qt.BottomEdge) }
        }
    }
	
	
//---Function for window controllers

    // PROPERTIES
    property int windowStatus: 0
    property int windowMargin: 10

    // INTERNAL FUNCTIONS
    QtObject{
        id: internal

        // Close Left Top Menu Popup
        function closeLeftPopup(){
            topTitleMenusExited.running = true
            console.log("Closed Popup")
            leftPopupMenu.activeMenu = true
            leftPopupMenu.rotateNormal()
            topTitleMenus.visible = false
        }

        // Show Overlay
        function showOverlay(){
            colorOverlayApp.visible = true
            showOverlayAnimation.running = true
        }
        function closeOverlay(){
            hideOverlayAnimation.running = true
        }

        // Maximize Restore
        function maximizeRestore(){
            if(windowStatus == 0){
                app.showMaximized()
                windowStatus = 1
                windowMargin = 0
                buttonMaximize.btnIcon = "qrc:/icons/window-stack.svg"
            }
            else{
                app.showNormal()
                windowStatus = 0
                windowMargin = 10
                buttonMaximize.btnIcon = "qrc:/icons/window-fullscreen.svg"
            }
        }

        // If Maximized Restore
        function ifMaximizedRestore(){
            if(windowStatus == 1){
                app.showNormal()
                windowStatus = 0
                windowMargin = 10
                buttonMaximize.btnIcon = "qrc:/icons/window-fullscreen.svg"
            }
        }

        // Restore Margins
        function restoreMargins(){
            windowStatus = 0
            windowMargin = 10
            buttonMaximize.btnIcon = "qrc:/icons/window-fullscreen.svg"
        }

        //---SPECTRUM CHAR

        function findClosestPoint(targetX, targetY) {
            var closestPoint;
            var minDistance = Number.MAX_VALUE;

            for (var i = 0; i < spectrumLine.count; i++) {
                var point = spectrumLine.at(i);
                var distance = Math.abs(point.x - targetX);
                if (distance < minDistance) {
                    closestPoint = point;
                    minDistance = distance;
                }
            }

            return closestPoint;
        }

        function showInfoRectangle(x, y) {
            infoRectangle.visible = true;
            infoRectangle.x = x - infoRectangle.width / 2;
            infoRectangle.y = y - infoRectangle.height - 10; // Adjust position
            infoText.text = "X: " + x.toFixed(2) + " Y: " + y.toFixed(2);
        }

        function hideInfoRectangle() {
            infoRectangle.visible = false;
        }
    }
	
	
//--- ChartView glow gradient


Glow {
	id:glow
	anchors.fill: spectrumChart
	radius: 0
	samples: 1000
	color: "#100000ff"
	source: spectrumChart

}

LinearGradient {
	id:gradient
	// 200 is length of gamut
	start:Qt.point(0,0)
	end:Qt.point(1,1)
	gradient: Gradient {
		GradientStop {
			position: 1;
			color: "#ff0000ff"
		}

		GradientStop {
			position: 0;
			color: "#000000ff"
		}
	}
	anchors.fill: glow
	source: glow
}

//--- Menu bar with style (style dont work)

    menuBar: MenuBar {
        Menu {
            title: qsTr("&File")
            Action { text: qsTr("&New...") }
            Action { text: qsTr("&Open...") }
            Action { text: qsTr("&Save") }
            Action { text: qsTr("Save &As...") }
            MenuSeparator { }
            Action { text: qsTr("&Quit") }
        }
        Menu {
            title: qsTr("&Edit")
            Action { text: qsTr("Cu&t") }
            Action { text: qsTr("&Copy") }
            Action { text: qsTr("&Paste") }
        }
        Menu {
            title: qsTr("&Help")
            Action { text: qsTr("&About") }
        }

        style: MenuBarStyle {

            padding {
                left: 8
                right: 8
                top: 3
                bottom: 3
            }

            background: Rectangle {
                id: rect
                border.color: menuBorderColor
                color: menuBackgroundColor
            }

            itemDelegate: Rectangle {            // the menus
                implicitWidth: lab.contentWidth * 1.4           // adjust width the way you prefer it
                implicitHeight: lab.contentHeight               // adjust height the way you prefer it
                color: styleData.selected || styleData.open ? "red" : "transparent"
                Label {
                    id: lab
                    anchors.horizontalCenter: parent.horizontalCenter
                    color: styleData.selected  || styleData.open ? "white" : "red"
                    font.wordSpacing: 10
                    text: styleData.text
                }
            }

            menuStyle: MenuStyle {               // the menus items
                id: goreStyle

                frame: Rectangle {
                    color: menuBackgroundColor
                }

                itemDelegate {
                    background: Rectangle {
                        color:  styleData.selected || styleData.open ? "red" : menuBackgroundColor
                        radius: styleData.selected ? 3 : 0
                    }

                    label: Label {
                        color: styleData.selected ? "white" : "red"
                        text: styleData.text
                    }

                    submenuIndicator: Text {
                        text: "\u25ba"
                        font: goreStyle.font
                        color: styleData.selected  || styleData.open ? "white" : "red"
                        styleColor: Qt.lighter(color, 4)
                    }

                    shortcut: Label {
                        color: styleData.selected ? "white" : "red"
                        text: styleData.shortcut
                    }

                    checkmarkIndicator: CheckBox {          // not strinctly a Checkbox. A Rectangle is fine too
                        checked: styleData.checked

                        style: CheckBoxStyle {

                            indicator: Rectangle {
                                implicitWidth: goreStyle.font.pixelSize
                                implicitHeight: implicitWidth
                                radius: 2
                                color: control.checked ?  "red" : menuBackgroundColor
                                border.color: control.activeFocus ? menuBackgroundColor : "red"
                                border.width: 2
                                Rectangle {
                                    visible: control.checked
                                    color: "red"
                                    border.color: menuBackgroundColor
                                    border.width: 2
                                    radius: 2
                                    anchors.fill: parent
                                }
                            }
                            spacing: 10
                        }
                    }
                }

                // scrollIndicator:               // <--- could be an image

                separator: Rectangle {
                    width: parent.width
                    implicitHeight: 2
                    color: "white"
                }
            }
        }
		
		